pkgname=electron
pkgver=17.2.0
pkgrel=1
arch=(x86_64)
depends=(c-ares ffmpeg gtk3+ libevent libxslt gzip nss)
makedepends=(clang git gperf harfbuzz json-c libnotify
	lld llvm ninja pciutils nodejs python2 python2-pip wget yarn)
commitid=9d5f7c16734fe1734193ce9f80b1976c9b76854c
commitid2=9d5f7c16734fe1734193ce9f80b1976c9b76854c
chromiumver=98.0.4758.109
gcc_patchset=5
source=(git+https://github.com/electron/electron.git#commit=$commitid
	git+https://chromium.googlesource.com/chromium/tools/depot_tools.git#branch=main
	https://github.com/stha09/chromium-patches/releases/download/chromium-${chromiumver%%.*}-patchset-${gcc_patchset}/chromium-${chromiumver%%.*}-patchset-${gcc_patchset}.tar.xz)

# Other stuff
system_libs=('ffmpeg'
	'fontconfig'
	'freetype'
	'harfbuzz-ng'
	'icu'
	'libdrm'
	'libevent'
	'libjpeg'
	'libpng'
	'libwebp'
	'libxml'
	'libxslt'
	'opus'
	'zlib'
	)

prepare() {
	# Python2 hack
	echo "[INFO]: Python V2 hack"

	mkdir -p python2-path
	ln -sf /usr/bin/python2 "${srcdir}/python2-path/python"

	# Export PATH to use build tools instead local system ones if available
	export PATH="${srcdir}/python2-path:${PATH}:${srcdir}/depot_tools"

	pip2 install --user setuptools

	pip2 install --user httplib2 six

	if [ -d src ]; then
		echo "[IGNORING]: chromium src is already cloned"

	else

		#
		# Fetch / Setup
		#

		echo "[!]: Fetching chromium..."
		git clone --branch=${chromiumver} --depth=1 \
			https://chromium.googlesource.com/chromium/src.git
	fi

	echo "solutions = [
	{
		\"name\": \"src/electron\",
		\"url\": \"file://${srcdir}/electron@${commitid2}\",
		\"deps_file\": \"DEPS\",
		\"managed\": False,
		\"custom_deps\": {
			\"src\": None,
		},
		\"custom_vars\": {},
	},
	]" > .gclient

	python2 "${srcdir}/depot_tools/gclient.py" sync \
		--with_branch_heads \
		--with_tags \
		--nohooks

	sed -e "s/'am'/'apply'/" -i src/electron/script/lib/git.py

	#
	# Hook part
	#

	echo "[!]: Running hooks..."
	python2 src/build/landmines.py
	python2 src/build/util/lastchange.py -o src/build/util/LASTCHANGE
	python2 src/build/util/lastchange.py -m GPU_LISTS_VERSION \
		--revision-id-only --header src/gpu/config/gpu_lists_version.h
	python2 src/build/util/lastchange.py -m SKIA_COMMIT_HASH \
		-s src/third_party/skia --header src/skia/ext/skia_commit_hash.h

	# Create sysmlink to system clang-format
	ln -sf /usr/bin/clang-format src/buildtools/linux64

	# Create sysmlink to system Node.js
	mkdir -p src/third_party/node/linux/node-linux-x64/bin
	ln -sf /usr/bin/node src/third_party/node/linux/node-linux-x64/bin
	cd src/third_party/node
	npm ci
	cd ../../..

	vpython src/tools/download_optimization_profile.py \
		--newest_state=src/chrome/android/profiles/newest.txt \
		--local_state=src/chrome/android/profiles/local.txt \
		--output_name=src/chrome/android/profiles/afdo.prof \
		--gs_url_base=chromeos-prebuilt/afdo-job/llvm

	python2 src/electron/script/apply_all_patches.py \
		src/electron/patches/config.json

	cd src/electron
	yarn install --frozen-lockfile
	cd ..

	#
	# Patching and etc
	#
	echo "[!]: Patching Chromium for using system libraries..."

	sed -i 's/OFFICIAL_BUILD/GOOGLE_CHROME_BUILD/' \
		tools/generate_shim_headers/generate_shim_headers.py

	for lib in $(printf "%s\n" "${system_libs[@]}" | sed 's/^libjpeg$/&_turbo/'); do
		third_party_dir="third_party/${lib}"

		if [ ! -d ${third_party_dir} ]; then
			third_party_dir="base/${third_party_dir}"
		fi
		
		find ${third_party_dir} -type f \
			\! -path "${third_party_dir}/chromium/*" \
			\! -path "${third_party_dir}/google/*" \
			\! -path 'third_party/harfbuzz-ng/utils/hb_scoped.h' \
			\! -regex '.*\.\(gn\|gni\|isolate\)' \
			-delete
	done

	python2 build/linux/unbundle/replace_gn_files.py \
		--system-libraries \
		"${system_libs[@]}"	
}

build() {
	export CC=clang
	export CXX=clang++
	export AR=ar
	export NM=nm

	# Do not warn about unknown warning options
	CFLAGS+='   -Wno-unknown-warning-option'
	CXXFLAGS+=' -Wno-unknown-warning-option'

	cd src
	export CHROMIUM_BUILDTOOLS_PATH="${PWD}/buildtools"

    	CONF_ARGS='
    blink_symbol_level = 0
    chrome_pgo_phase = 0
    clang_use_chrome_plugins = false
    custom_toolchain = "//build/toolchain/linux/unbundle:default"
    host_toolchain = "//build/toolchain/linux/unbundle:default"
    icu_use_data_file = false
    is_component_ffmpeg = false
    link_pulseaudio = true
    treat_warnings_as_errors = false
    use_gnome_keyring = false
    use_sysroot = false
    '

	gn gen out/Release \
	--args="import(\"//electron/build/args/release.gn\") ${CONF_ARGS}"

	strip -s out/Release/electron
	ninja -C out/Release electron_dist_zip
}

package() {
	install -dm755 "${pkgdir}/usr/lib/${pkgname}"
	bsdtar -xf src/out/Release/dist.zip -C "${pkgdir}/usr/lib/${pkgname}"

	chmod u+s "${pkgdir}/usr/lib/${pkgname}/chrome-sandbox"

	install -Dm755 "${srcdir}/electron-launcher.sh" \
		"${pkgdir}/usr/bin/${pkgname}"

	install -Dm644 "electron.desktop" \
		"${pkgdir}/usr/share/applications/${pkgname}.desktop"

	install -Dm644 src/electron/default_app/icon.png \
		"${pkgdir}/usr/share/pixmaps/${pkgname}.png"
}
