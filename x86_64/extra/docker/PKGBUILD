pkgname=docker
pkgver=20.10.17
pkgrel=1
arch=('x86_64')
depends=(glibc sqlite3 systemd libseccomp libtool runc containerd iptables)
makedepends=(git go btrfs-progs cmake systemd go-md2man sed)
TINI_COMMIT=de40ad007797e0dcd8b7126f27bb87401d224240
LIBNETWORK_COMMIT=f6ccccb1c082a432c2a5814aaedaca56af33d9ea
BUILDX_COMMIT=6224def4dd2c3d347eee19db595348c50d7cb491
source=(git+https://github.com/docker/cli.git#tag=v$pkgver
	git+https://github.com/moby/moby.git#tag=v$pkgver
	git+https://github.com/docker/libnetwork.git#commit=$LIBNETWORK_COMMIT
	git+https://github.com/krallin/tini.git#commit=$TINI_COMMIT
	git+https://github.com/docker/buildx.git#commit=$BUILDX_COMMIT
	docker.sysusers)

# create a fake go path directory and pushd into it
# $1 real directory
# $2 gopath directory
gopath_pushd() {
  mkdir -p "$GOPATH/src/${2%/*}"
  rm -f "$GOPATH/src/$2"
  ln -rsT "$1" "$GOPATH/src/$2"
  pushd  "$GOPATH/src/$2" >/dev/null
}


build() {
	### globals
	export GOPATH="$srcdir"
	export PATH="$GOPATH/bin:$PATH"
	export CGO_CPPFLAGS="${CPPFLAGS}"
	export CGO_CFLAGS="${CFLAGS}"
	export CGO_CXXFLAGS="${CXXFLAGS}"
	export CGO_LDFLAGS="${LDFLAGS}"
	export LDFLAGS=''
	export GOFLAGS='-buildmode=pie -trimpath -mod=readonly -modcacherw -ldflags=-linkmode=external'
	export GO111MODULE=off
	export DISABLE_WARN_OUTSIDE_CONTAINER=1

	echo "[+]: Building CLI"
	gopath_pushd cli github.com/docker/cli
	make VERSION=$pkgver dynbinary
	make manpages
	popd &> /dev/null

	echo "[+]: Building daemon"
	gopath_pushd moby github.com/docker/docker
	DOCKER_GITCOMMIT=$(cd "$srcdir"/moby && git rev-parse --short HEAD) \
		DOCKER_BUILDTAGS='seccomp journald apparmor' \
		VERSION=$pkgver \
		hack/make.sh dynbinary
	popd &> /dev/null

	echo "[+]: Building docker-proxy"
	gopath_pushd libnetwork github.com/docker/libnetwork
	go build github.com/docker/libnetwork/cmd/proxy
	popd &> /dev/null

	echo "[+]: Building docker-init"
	gopath_pushd tini github.com/krallin/tini
	cmake .
	make tini-static
	popd &> /dev/null

	echo "[+]: Building buildx cli plugin"
	buildx=github.com/docker/buildx
	gopath_pushd buildx $buildx
	GO111MODULE=on go build -mod=vendor -o docker-buildx -ldflags "-linkmode=external \
		-X $_buildx_r/version.Version=$(git describe --match 'v[0-9]*' --always --tags)-docker \
		-X $_buildx_r/version.Revision=$(git rev-parse HEAD) \
		-X $_buildx_r/version.Package=$buildx" \
		./cmd/buildx
	popd &> /dev/null
}

package() {
	### proxy
	install -Dm755 libnetwork/proxy "$pkgdir/usr/bin/docker-proxy"

	### init
	install -Dm755 tini/tini-static "$pkgdir/usr/bin/docker-init"

	### dockerd
	install -Dm755 moby/bundles/dynbinary-daemon/dockerd "$pkgdir"/usr/bin/dockerd

	### systemd units
	cd "$srcdir"/moby/contrib
	install -Dm644 'init/systemd/docker.service' "$pkgdir/usr/lib/systemd/system/docker.service"
	install -Dm644 'init/systemd/docker.socket' "$pkgdir/usr/lib/systemd/system/docker.socket"

	# systemd rules
	install -Dm644 'udev/80-docker.rules' "$pkgdir/usr/lib/udev/rules.d/80-docker.rules"
	install -Dm644 "$srcdir/$pkgname.sysusers" "$pkgdir/usr/lib/sysusers.d/$pkgname.conf"

	### cli
	cd "$srcdir"/cli

	# binary
	install -Dm755 build/docker "$pkgdir/usr/bin/docker"

	# completion
	install -Dm644 'contrib/completion/bash/docker' "$pkgdir/usr/share/bash-completion/completions/docker"
	install -Dm644 'contrib/completion/zsh/_docker' "$pkgdir/usr/share/zsh/site-functions/_docker"
	install -Dm644 'contrib/completion/fish/docker.fish' "$pkgdir/usr/share/fish/vendor_completions.d/docker.fish"

	# man
	install -dm755 "$pkgdir/usr/share/man"
	cp -r man/man* "$pkgdir/usr/share/man"

	# cli-plugins
	cd "$srcdir"/src/github.com/docker
	install -Dm755 buildx/docker-buildx "$pkgdir/usr/lib/docker/cli-plugins/docker-buildx"
}
